# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17P46mg54QDgvNI4FMMWA6KexXqMJOHEn
"""

import streamlit as st
import pandas as pd
import numpy as np
from pandas.tseries.offsets import DateOffset
import statsmodels.api as sm
import pickle

# --- Load saved model and preprocessing objects ---
with open("fx_model_sm.pkl", "rb") as f:
    saved_objects = pickle.load(f)

model_sm = saved_objects['model']
scaler = saved_objects['scaler']
pca = saved_objects['pca']

# --- Preprocessing function ---
def preprocess_new_row(row, scaler, pca):
    row = row.copy()
    row['log_GOLD'] = np.log(row['Gold_lagged'])
    row = row.drop(columns=['Gold_lagged'])

    # scaling + PCA
    X_scaled = scaler.transform(row)
    X_pca = pca.transform(X_scaled)

    # convert to dataframe with same number of PCs
    X_pca_df = pd.DataFrame(X_pca, columns=[f'PC{i+1}' for i in range(X_pca.shape[1])])

    # add constant ONCE (important!)
    X_pca_df = sm.add_constant(X_pca_df, has_constant="add")
    X_pca_df = X_pca_df.reset_index(drop=True)

    return X_pca_df

# --- Streamlit UI ---
st.title("FX Rate Predictor (6-Month Lag Features)")
st.markdown("""
Upload a CSV with columns: `Date`, `CPI`, `Nifty 50`, `Refined Gold Futures`.
Select a date to predict FX rate using values **6 months prior**.
Dates in DD-MM-YYYY format (e.g., 23-06-2025) are supported.
""")

# --- File uploader ---
uploaded_file = st.file_uploader("Upload CSV", type=["csv"])

if uploaded_file:
    # Parse dates correctly (dayfirst=True for DD-MM-YYYY)
    df = pd.read_csv(uploaded_file, parse_dates=['Date'], dayfirst=True)
    df = df.sort_values('Date').reset_index(drop=True)

    # Rename columns to match training
    df = df.rename(columns={
        "CPI": "CPI_lag1",
        "Nifty 50 (NSEI)": "Nifty_lagged",    # <- add if that's in CSV
        "Refined Gold Futures": "Gold_lagged"             # <- add if dataset uses 'Gold'
    })

    # --- Date input ---
    user_date = st.date_input("Select a date:")
    lag_date = pd.to_datetime(user_date) - DateOffset(months=6)

    if lag_date in df['Date'].values:
        lagged_row = df.loc[df['Date'] == lag_date, ['CPI_lag1','Nifty_lagged','Gold_lagged']].copy()

        # Preprocess and predict
        X_new = preprocess_new_row(lagged_row, scaler, pca)
        pred_sm = model_sm.get_prediction(X_new)
        pred_summary = pred_sm.summary_frame(alpha=0.05)

        pred_fx = pred_summary['mean'].values[0]
        ci_lower = pred_summary['mean_ci_lower'].values[0]
        ci_upper = pred_summary['mean_ci_upper'].values[0]

        st.success(f"Predicted FX Rate on {user_date}: {pred_fx:.2f}")
        st.info(f"95% Confidence Interval: [{ci_lower:.2f}, {ci_upper:.2f}]")
    else:
        st.warning("Lagged data (6 months prior) not available for this date.")